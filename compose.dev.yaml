services:
  db:
    image: "postgres:${POSTGRES_IMAGE_TAG:-16}"
    ports:
      # Exposer le port sur l'hôte pour se connecter avec un client BDD
      - "5432:5432"
    environment:
      - "POSTGRES_DB=${POSTGRES_DB}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
      - "POSTGRES_USER=${POSTGRES_USER}"
    volumes:
      - etudiant-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - etudiant-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile # On peut utiliser le même Dockerfile si Spring Boot Dev Tools est inclus
    ports:
      # Exposer le port du backend pour des tests directs via API
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      # Monter le code source pour le hot-reloading
      - ./backend:/app
      # Exclure les dossiers lourds pour de meilleures performances
      - /app/target
    environment:
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${POSTGRES_DB}?charset=UTF8"
      - "SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}"
      - "SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}"
    networks:
      - etudiant-network

  frontend:
    build:
      context: ./frontend
      # Utiliser un Dockerfile spécifique au développement
      dockerfile: Dockerfile.dev
    ports:
      # Exposer le port du serveur de développement Angular
      - "4200:4200"
    volumes:
      # Monter le code source pour le hot-reloading
      - ./frontend:/app
      # Exclure node_modules car il sera géré dans le conteneur
      - /app/node_modules
    networks:
      - etudiant-network
    depends_on:
      - backend

volumes:
  etudiant-data:

networks:
  etudiant-network:
    driver: bridge