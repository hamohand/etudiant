services:
  # --- SERVICE BASE DE DONNÉES (inchangé) ---
  ${DB_SERVICE_NAME}:
    image: postgres:16-alpine
    container_name: ${PROJECT_NAME}-${DB_SERVICE_NAME}
    restart: unless-stopped
    env_file:
      - .env # Les variables POSTGRES_* sont lues depuis ce fichier
#    environment:
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "${DB_SERVICE_NAME}", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ${DB_VOLUME_NAME}:/var/lib/postgresql/data
    networks:
      - default

  # --- SERVICE BACKEND ---
  ${BACKEND_SERVICE_NAME}:
    build: ./backend
    container_name: ${PROJECT_NAME}-${BACKEND_SERVICE_NAME}
    networks:
      - default
      - webproxy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_SERVICE_NAME}:5432/${POSTGRES_DB}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=webproxy"

      # --- Routeur HTTPS (sécurisé) ---
      - "traefik.http.routers.${BACKEND_SERVICE_NAME}-secure.rule=Host(`${BACKEND_API_DOMAIN}`)"
      - "traefik.http.routers.${BACKEND_SERVICE_NAME}-secure.entrypoints=websecure"
      - "traefik.http.routers.${BACKEND_SERVICE_NAME}-secure.tls.certresolver=le"
      - "traefik.http.services.${BACKEND_SERVICE_NAME}.loadbalancer.server.port=${BACKEND_INTERNAL_PORT}"

      # --- Routeur HTTP (pour la redirection) ---
      # Note : On réutilise le même middleware "https-redirect" défini plus haut
      - "traefik.http.routers.${BACKEND_SERVICE_NAME}-http.rule=Host(`${BACKEND_API_DOMAIN}`)"
      - "traefik.http.routers.${BACKEND_SERVICE_NAME}-http.entrypoints=web"
      - "traefik.http.routers.${BACKEND_SERVICE_NAME}-http.middlewares=https-redirect"

  # --- SERVICE FRONTEND ---
  ${FRONTEND_SERVICE_NAME}:
    build: ./frontend
    container_name: ${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}
    networks:
      - default
      - webproxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=webproxy"

      # --- Middleware (défini une seule fois, réutilisé partout) ---
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"

      # --- Routeur HTTPS (sécurisé) ---
      - "traefik.http.routers.${FRONTEND_SERVICE_NAME}-secure.rule=Host(`${FRONTEND_DOMAIN}`) || Host(`${WWW_FRONTEND_DOMAIN}`)"
      - "traefik.http.routers.${FRONTEND_SERVICE_NAME}-secure.entrypoints=websecure"
      - "traefik.http.routers.${FRONTEND_SERVICE_NAME}-secure.tls.certresolver=le"
      - "traefik.http.services.${FRONTEND_SERVICE_NAME}.loadbalancer.server.port=80" # Port Nginx/Angular

      # --- Routeur HTTP (pour la redirection) ---
      - "traefik.http.routers.${FRONTEND_SERVICE_NAME}-http.rule=Host(`${FRONTEND_DOMAIN}`) || Host(`${WWW_FRONTEND_DOMAIN}`)"
      - "traefik.http.routers.${FRONTEND_SERVICE_NAME}-http.entrypoints=web"
      - "traefik.http.routers.${FRONTEND_SERVICE_NAME}-http.middlewares=https-redirect"



# Définitions explicites des volumes et réseaux pour une meilleure clarté
networks:
  webproxy:
    external: true
  default:

volumes:
  ${DB_VOLUME_NAME}:
